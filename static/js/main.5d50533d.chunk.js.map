{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAwBeA,EArBE,SAAC,GAAe,EAAbC,OAEhB,MAAM,IAAIC,MAAM,aCULC,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKC,UAAU,MAAf,SACE,uBACEC,KAAK,SACLC,YAAY,gBACZF,UAAU,mCACVG,SAAUJ,OCcHK,E,kDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,iEAEAG,KAAKL,MAAMO,a,GAhBIC,aCiDbC,G,wDA5Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAb1C,EAAKb,MAAQ,CACXV,OAAQ,GACRqB,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKb,SAAS,CAAEf,OAAQ4B,S,oBAO7C,WACE,MAAgCd,KAAKJ,MAA7BV,EAAR,EAAQA,OAAQqB,EAAhB,EAAgBA,YACVQ,EAAiB7B,EAAO8B,QAAO,SAACC,GACpC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAGvD,OAAKjC,EAAOmC,OAQR,sBAAK/B,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWD,aAAcW,KAAKK,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnB,OAAQ6B,SAVtB,qBAAKzB,UAAU,KAAf,SACE,oBAAIA,UAAU,KAAd,2B,GA5BQa,cCMHmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.5d50533d.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  if (true) {\n    throw new Error(\"NOOOOOO!\");\n  }\n\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={robots[i].id}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"search\"\n        placeholder=\"search robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. This is not good for you.</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (!robots.length) {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Loading</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">Robo Friends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}